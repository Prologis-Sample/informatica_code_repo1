# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: OneTimeRun
    displayName: First time run 
    jobs:
      - job: FirstRun
        displayName: Need to run once
        steps:
          -  script: |
                git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git
                cp $(System.DefaultWorkingDirectory)/Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics $(System.DefaultWorkingDirectory)
                chmod +x iics
                mkdir SourceFiles
                cd SourceFiles
                $(System.DefaultWorkingDirectory)/iics export --region ap --username iicsdemodevelopment@gmail.com --password Iicsdemo@123 --artifacts Explore/Project_Folder_1/tf_sample_Task_Flow_1.WORKFLOW --zipFilePath tf_sample_Task_Flow.zip
                mv tf_sample_Task_Flow.zip tf_sample_Task_Flow_1.0.0.zip
                cd ..
                git add SourceFiles
                git status
                git commit -m "Initial Source file upload"
                git push origin HEAD:main


  - stage: Version
    displayName: Read and generate job versions
    jobs:
      - job: Versioning
        displayName: Read job file and create next version
        steps:
          - checkout: self
            submodules: true
            persistCredentials: true 
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                jobName=`cat $(jobfile) | grep "Job Name" | cut -d ":" -f2 | sed 's/"//g'`
                version=`cat $(jobfile)  |cut -d "," -f2| grep "Version" | cut -d ":" -f2 |sed 's/"//g'|sed -e 's/\r//g'|sed -e 's/ //g'`
                major=`echo $version | cut -d "." -f1`
                minor=`echo $version | cut -d "." -f2`
                patch=`echo $version | cut -d "." -f3`
                newpatch=$(expr "$patch" + 1)
                newversion=`echo $major.$minor.$newpatch` 
                mkdir -p $(Pipeline.Workspace)/variables
                echo "$version" > $(Pipeline.Workspace)/variables/fileversion
                echo "[$newversion]"
                sed "s/$version/$newversion/g" $(jobfile) >newfile.txt                     
                cat $(jobfile)
                cat newfile.txt
                mv newfile.txt $(jobfile)
                echo "Setting git config..."
                git config --global user.email "jenithangel@gmail.com"
                git config --global user.name "angeljenitha"
                git add $(jobfile)
                git status
                git commit -m "version $newversion"
                git push origin HEAD:main
                echo "Execute Completed"
              name: versionScript  
          - publish: $(Pipeline.Workspace)/variables 
            artifact: variables    
          
          



  - stage: DevUnitTest
    displayName: Simple Unit test case run
    dependsOn: Version
          
    jobs:
      - job: devtest
        displayName: sample test
        steps:
          - download: current
            artifact: variables
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #version=1.0.49
                #newversion=1.0.50
                #sed "s/$version/$newversion/g" $(jobfile) >latest1.txt
                #cat latest.txt
                #cat latest1.txt
                buildversion=`cat $(Pipeline.Workspace)/variables/fileversion`
                echo $buildversion

  - stage: ExportFromDev
    displayName: Export the source file from dev
    jobs:
      - job: exportartifact
        displayName: export from dev
        steps:
         - download: 
           artifact: variables
         - task: Bash@3
           inputs:
             targetType: 'inline'
             script: |
               # Write your commands here
      
                git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git
                cp $(System.DefaultWorkingDirectory)/Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics $(System.DefaultWorkingDirectory)
                chmod +x iics
                $(System.DefaultWorkingDirectory)/iics export --region ap --username iicsdemodevelopment@gmail.com --password Iicsdemo@123 --artifacts Explore/Project_Folder_1/tf_sample_Task_Flow_1.WORKFLOW --zipFilePath tf_sample_Task_Flow.zip

        
          
  - stage: UploadArtifact
    displayName: Upload the artifact with version to git repo
  
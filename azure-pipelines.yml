# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: OneTimeRun
    displayName: First time run 
    jobs:
      - job: FirstRun
        displayName: Need to run once
        steps:
          - checkout: self            
            persistCredentials: true 
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git
                cp $(System.DefaultWorkingDirectory)/Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics $(System.DefaultWorkingDirectory)
                chmod +x iics
                mkdir SourceFiles
                cd SourceFiles
                $(System.DefaultWorkingDirectory)/iics export --region ap --username $(devuser) --password $(devpass) --artifacts Explore/Project_Folder_1/$(jobName).WORKFLOW --zipFilePath $(jobName).zip
                mv $(jobName).zip $(jobName)_1.0.0.zip
                cd ..
                git config --global user.email "jenithangel@gmail.com"
                git config --global user.name "angeljenitha"
                git add SourceFiles
                git status
                git fetch origin
                git diff HEAD..origin/master
                git commit -m "Initial Source file upload"
                git push origin HEAD:main

  - stage: Version
    displayName: Read and generate job versions
    
    jobs:
      - job: Versioning
        displayName: Read job file and create next version
        steps:
          - checkout: self
            persistCredentials: true 
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                jobName=`cat $(jobfile) | grep "Job Name" | cut -d ":" -f2 | sed 's/"//g'`
                version=`cat $(jobfile)  |cut -d "," -f2| grep "Version" | cut -d ":" -f2 |sed 's/"//g'|sed -e 's/\r//g'|sed -e 's/ //g'`
                major=`echo $version | cut -d "." -f1`
                minor=`echo $version | cut -d "." -f2`
                patch=`echo $version | cut -d "." -f3`
                newpatch=$(expr "$patch" + 1)
                newversion=`echo $major.$minor.$newpatch` 
                mkdir -p $(Pipeline.Workspace)/variables
                echo "$version" > $(Pipeline.Workspace)/variables/fileversion
                echo "$newversion" > $(Pipeline.Workspace)/variables/newfileversion
                echo "[$newversion]"
                sed "s/$version/$newversion/g" $(jobfile) >newfile.txt                     
                cat $(jobfile)
                cat newfile.txt
                mv newfile.txt $(jobfile)
                git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git
                cp $(System.DefaultWorkingDirectory)/Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics $(System.DefaultWorkingDirectory)
                chmod +x iics
                $(System.DefaultWorkingDirectory)/iics export --region ap --username $(devuser) --password $(devpass) --artifacts Explore/Project_Folder_1/$(jobName).WORKFLOW --zipFilePath $(jobName).zip
                newfile=tf_sample_Task_Flow_1_$newversion.zip
                mv $(jobName).zip $(System.DefaultWorkingDirectory)/SourceFiles/$newfile
                echo "Setting git config..."
                git config --global user.email "jenithangel@gmail.com"
                git config --global user.name "angeljenitha"
                git add $(jobfile)
                git add SourceFiles/$newfile
                git status
                git commit -m "version $newversion"
                git push origin HEAD:main
                echo "Execute Completed"
              name: versionScript  
          - publish: $(Pipeline.Workspace)/variables 
            artifact: variables    

  - stage: DevUnitTest
    displayName: Simple Unit test case run
    dependsOn: Version
    jobs:
      - job: devtest
        displayName: sample test
        steps:
          - download: current
            artifact: variables
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                buildversion=`cat $(Pipeline.Workspace)/variables/fileversion`
                echo $buildversion
                if [ -f /SourceFiles/$(jobName)_$buildversion.zip ]; then
                   echo " source file exist in git repo $(projectRepo) ..\n Test Success"
                else
                   echo "Test Failure. "
                fi

  - stage: LatestVersiontoQA
    displayName: Import the source file to QA
   # dependsOn: DevUnitTest
    jobs:
      - job: ImportLatestFile
        displayName: approve the QA latset import
        steps:

          - task: SSH@0
            inputs:
              sshEndpoint: 'sshqa'
              runOptions: 'inline'
              #failOnStdErr: false
              inline: |
                version=$(deployversion)
                git config --global user.email "jenithangel@gmail.com"
                git config --global user.name "angeljenitha"
                if ! [ -d "Tools" ]; then
                    git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git >> log.txt   2>&1
                    cp Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics .
                    chmod +x iics
                fi
                if [ -d "$(projectName)" ]; then
                   rm -rf $(projectName)
                fi   
                git clone $(projectRepo) > log.txt  2>&1
                echo $?
                if [ "$version" == "0" ]
                then
                    version=`cat $(projectName)/$(jobfile)  |cut -d "," -f2| grep "Version" | cut -d ":" -f2 |sed 's/"//g'|sed -e 's/\r//g'|sed -e 's/ //g'`
                    filename=$(jobName)_$version.zip
                else
                    filename=$(jobName)_$version.zip
                fi
                echo $filename $version
                
                currdir=`pwd`
                $currdir/iics import --region ap --username $(qauser) --password $(qapass) --zipFilePath $(projectName)/SourceFiles/$filename 1 >> log.txt   2> err.txt
              readyTimeout: '20000'

  - stage: SpecificVersiontoQA
    displayName: Import the specific source file to QA
    condition: and(succeeded(), ne(variables['deployversion'], '0'))
    jobs:
      - job: ImportSpecificFile
        displayName: approve the QA  import of specific version
              
        steps:

          - task: SSH@0
            inputs:
              sshEndpoint: 'sshqa'
              runOptions: 'inline'
              
              inline: |
                
                git config --global user.email "jenithangel@gmail.com"
                git config --global user.name "angeljenitha"
                if [ -d "$(projectName)" ]; then
                   rm -rf $(projectName)
                fi   
                git clone $(projectRepo) > log.txt  2>&1
                filename=$(jobName)_$(deployversion).zip
                if [ -f $(projectName)/SourceFiles/$filename ]
                then 
                   echo "$filename Proceeding to import " >> log.txt  2>&1
                else
                  echo "$filename doesnt exist. Please check the version"
                  exit 1
                fi
                if ! [ -d "Tools" ]; then
                    git clone https://github.com/InformaticaCloudApplicationIntegration/Tools.git >> log.txt   2>&1
                    cp Tools/'IICS Asset Management CLI'/v2/linux-x86_64/iics .
                    chmod +x iics
                fi
                
                echo $filename $version
                
                currdir=`pwd`
                $currdir/iics import --region ap --username $(qauser) --password $(qapass) --zipFilePath $(projectName)/SourceFiles/$filename 1 >> log.txt   2> err.txt
              readyTimeout: '20000'
    
    
  

      


